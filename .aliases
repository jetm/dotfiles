alias cp='cp -i'
alias mv='mv -i'
alias rm='rm -i'
alias vimn='vim -u NONE'

# Show my external IP address
alias myextip='curl ifconfig.me'

# Show extended information about my external IP address
alias myextipe='curl ifinfo.io'

# Clear RAM Memory Cache, Buffer and Swap Space
clean-cache-mem() {
  sudo sh -c "free -h && \
    # Clear PageCache, dentries and inode
    sync && echo 3 > /proc/sys/vm/drop_caches && \
    swapoff -a && swapon -a && \
    printf '\n%s\n' 'Ram-cache and Swap Cleared' && \
    free -h"
}

# Show all targets to build
make-ls-targets() {
  make -qp | awk -F':' \
    '/^[a-zA-Z0-9][^$#\/\t=]*:([^=]|$)/ {split(\$1,A,/ /);for(i in A)print A[i]}'
}

# parallel make
_pm() {
  local NUMCPUS
  # get number of processors plus one
  NUMCPUS=$(( $(getconf _NPROCESSORS_ONLN) + 1 ))
  time nice make -j"${NUMCPUS}" --load-average="${NUMCPUS}"
}

# disable shell reserved word
disable -r time

# Add format time like this:
#
# real    0.00[h:]m:s
# user    0.00s
# sys     0.00s
alias time='time -f "\nreal\t%E[h:]m:s\nuser\t%Us\nsys\t%Ss" '

#
# Arch Linux Stuff
#
if [ -f /etc/arch-release ] || [ -f /etc/manjaro-release ]; then
  #
  # Pacman aliases
  #

  if (command -v yaourt > /dev/null 2>&1); then
    # Upgrade all packages
    alias yaoud='yaourt -Syu --devel --aur'

    # List packages are not in remote repositories (pacman repos and AUR)
    paremote() {
      for p in $(pacman -Qqm); do
        yaourt -Ssq "$p" | grep -E -q "^$p$" || echo "$p"
      done
    }
  fi

  # Recursively removing orphans (be careful)
  alias paorph='sudo pacman -Rs $(pacman -Qtdq)'

  # Remove ALL packages from cache
  alias paremALL='sudo pacman -Scc'

  # Remove the specified package(s), its configuration(s) and unneeded
  # dependencies
  alias parem='sudo pacman -Rns'

  if (command -v updpkgsums > /dev/null 2>&1); then
    # Update checksum package, build and generate .SCRINFO file
    alias aurgen='updpkgsums && makepkg -Csf && mksrcinfo'
  fi

  if (command -v pacaur > /dev/null 2>&1); then
    # Upgrade all packages
    alias paud='pacaur -Syu --devel'

    # Install specific package(s) from local and AUR
    alias pain='pacaur -S'

    # Install specific package from source package
    alias pains='pacaur -U'

    # Search for package(s) for local and AUR
    alias pasp='pacaur -Ss'
  fi
fi

#
# Docker alias and functions
#

if (command -v docker > /dev/null 2>&1); then
  # Get images
  alias dki='docker images'

  # Run interactive container, e.g., $dkri base /bin/bash
  alias dkri='docker run -i -t -P'

  # Remove image
  alias dkrmi='docker rmi -f'

  # Remove all containers
  alias dkrmALL='docker rm $(docker ps -a -q)'
fi

#
# C alias
#
if (command -v c > /dev/null 2>&1); then
  # Run files with ./file.c without chmod +x
  alias -s c='c'
  alias -s cc='c'
  alias -s cpp='c'
fi

#
# Fix prezto alias for dtags
#


if (command -v dtags-activate > /dev/null 2>&1); then
  unalias d
  unalias e
  alias v='${(z)VISUAL:-${(z)EDITOR}}'
  eval "$(dtags-activate zsh)"
fi

#
# Extra Git alias
#
if (command -v git > /dev/null 2>&1); then
  # Run commit without hooks
  alias gcv='git commit --no-verify'
  alias gcs='git commit --verbose --signoff'
  alias gcra='git commit --amend --reset-author --no-edit'

  # Get to the top of a git tree
  cdp() {
    TEMP_PWD=$(pwd);
    while ! [ -d .git ]; do
    cd ..;
    done
    OLDPWD=$TEMP_PWD;
  }
fi

if (command -v thefuck > /dev/null 2>&1); then
  fix(){
    TF_CMD=$(TF_ALIAS=fix PYTHONIOENCODING=utf-8 \
      TF_SHELL_ALIASES=$(alias) thefuck "$(fc -ln -1 | tail -n 1)") \
      && eval "$TF_CMD" && print -s "$TF_CMD"
  }
fi

#
# Useful Functions
#

# debug bash script
debug() {
  local script="$1"; shift
  bash -x "$(which "${script}")" "$@"
}

# vim:set ts=2 sw=2 ft=sh et:
