# Clear RAM Memory Cache, Buffer and Swap Space
clean-cache-mem() {
  sudo sh -c "free -h && \
    # Clear PageCache, dentries and inode
    sync && echo 3 > /proc/sys/vm/drop_caches && \
    swapoff -a && swapon -a && \
    printf '\n%s\n' 'Ram-cache and Swap Cleared' && \
    free -h"
}

# Show all targets to build
make-ls-targets() {
  make -qp | awk -F':' \
    '/^[a-zA-Z0-9][^$#\/\t=]*:([^=]|$)/ {split(\$1,A,/ /);for(i in A)print A[i]}'
}

# parallel make
_pm() {
  local NUMCPUS
  # get number of processors plus one
  NUMCPUS=$(( $(getconf _NPROCESSORS_ONLN) + 2 ))
  time nice make -j"${NUMCPUS}" --load-average="${NUMCPUS}"
}

do-cmake() {
  ( rm -rf build && mkdir build && cd build && cmake ../ ) && \
    cmake --build build
}

aurgen() {
  if (! command -v updpkgsums > /dev/null 2>&1); then
    echo "error: updpkgsums is not installed" 1>&2
    return 1
  fi

  if (! command -v namcap > /dev/null 2>&1); then
    echo "error: namcap is not installed" 1>&2
    return 1
  fi

  if [ -f /etc/arch-release ] || [ -f /etc/manjaro-release ]; then
    # Validate PKGBUILD, update checksum package, build and generate .SCRINFO
    # file
    namcap PKGBUILD && \
      updpkgsums && \
      makepkg --cleanbuild --syncdeps --force && \
      makepkg --printsrcinfo >! .SRCINFO
  fi
}

# disable shell reserved word
disable -r time

# Add format time like this:
#
# real    0.00[h:]m:s
# user    0.00s
# sys     0.00s
alias time='time -f "\nreal\t%E[h:]m:s.ms\nuser\t%Us\nsys\t%Ss" '

#
# Arch Linux Stuff
#
if [ -f /etc/arch-release ] || [ -f /etc/manjaro-release ]; then
  #
  # Pacman aliases
  #

  # Recursively removing orphans (be careful)
  alias paorph='sudo pacman -Rs $(pacman -Qtdq)'

  # Remove ALL packages from cache
  alias paremALL='sudo pacman -Scc'

  # Remove the specified package(s), its configuration(s) and unneeded
  # dependencies
  alias parem='sudo pacman -Rns'

  if (command -v yay > /dev/null 2>&1); then
    # Upgrade all packages
    alias paud='yay -Syu --devel'

    # Install specific package(s) from local and AUR
    alias pain='yay -S'

    # Install specific package from source package
    alias pains='yay -U'

    # Search for package(s) for local and AUR
    alias pasp='yay'
  fi
fi

#
# Docker alias and functions
#

if (command -v docker > /dev/null 2>&1); then
  # Get images
  alias dki='docker images'

  # Run interactive container, e.g., $dkri base /bin/bash
  alias dkri='docker run -i -t -P'

  # Remove image
  alias dkrmi='docker rmi -f'

  # Remove all containers
  alias dkrmALL='docker rm $(docker ps -a -q)'
fi

if (command -v thefuck > /dev/null 2>&1); then
  fix(){
    TF_CMD=$(TF_ALIAS=fix PYTHONIOENCODING=utf-8 \
      TF_SHELL_ALIASES=$(alias) thefuck "$(fc -ln -1 | tail -n 1)") \
      && eval "$TF_CMD" && print -s "$TF_CMD"
  }
fi

#
# Useful Functions
#

# debug bash script
debug() {
  local script="$1"; shift
  bash -x "$(which "${script}")" "$@"
}

# Remove duplicates PATH
remove_PATH_duplicates() {
  if [ -n "$PATH" ]; then
    old_PATH=$PATH:; PATH=
    while [ -n "$old_PATH" ]; do
      x=${old_PATH%%:*}      # the first remaining entry
      case $PATH: in
        *:"$x":*) ;;         # already there
        *) PATH=$PATH:$x;;   # not there yet
      esac
      old_PATH=${old_PATH#*:}
    done
    PATH=${PATH#:}
    unset old_PATH x
    export PATH
  fi
}

# vim:set ts=2 sw=2 ft=sh et:
