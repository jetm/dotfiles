# Git config for all repositories inside of work/
[includeIf "gitdir:**/repos/work/**"]
    path = ~/.gitconfig-work

[includeIf "gitdir:**/repos/work/**"]
    path = ~/.git-send-email-work.conf

# Git config for all repositories inside of personal/
[includeIf "gitdir:**/repos/personal/**"]
    path = ~/.gitconfig-personal

[includeIf "gitdir:~/Dropbox/**"]
    path = ~/.gitconfig-personal

[includeIf "gitdir:~/.local/share/chezmoi/**"]
    path = ~/.gitconfig-personal

[user]
    name = Javier Tia

[safe]
    directory = *

[alias]
    # Print the name of the current branch
    current = symbolic-ref --short HEAD

    last = lg -1

    # Logs
    lol = log --topo-order --pretty=format:'%C(green)%h%C(reset) %s%C(red)%d%C(reset)'
    lg = log --topo-order --pretty=format:'%C(bold)Commit:%C(reset) %C(green)%H%C(red)%d%n%C(bold)Author:%C(reset) %C(cyan)%an <%ae>%n%C(bold)Date:%C(reset)   %C(blue)%ai (%ar)%C(reset)%n%+B'

    # List new commits, of current branch, have been created by last command
    # (typically used after a "git pull")
    new = "!f() { ref=$(git symbolic-ref --short HEAD); \
        git log ${ref}@{1}..${ref}@{0} \"$@\"; }; f"

    # Like <git new>, but it accepts branches as parameters, e.g.: git newp
    # origin/BRANCH
    newp = "!f() { git log ${1}@{1}..${1}@{0} \"$@\"; }; f"

    # Update local repo and all submodules
    spull = "!__git_spull() { git pull \"$@\" && \
        git submodule sync --recursive && \
        git submodule update --init --recursive; }; __git_spull"

    # Checkout our changes, leaves/gets theirs changes
    ours = "!f() { git checkout --ours -- $@ && git add $@; }; f"

    # Checkout theirs changes, leaves/gets ours changes
    theirs = "!f() { git checkout --theirs -- $@ && git add $@; }; f"

    # Show ours changes
    show-ours = !git-show :3:"${1}"

    # Show theirs changes
    show-theirs = !git-show :2:"${1}"

    # Summarizes commits, sort based on numbers commits and show each author
    # email
    score = shortlog -n -s -e

    # For raw patches, a shortcut for a 'normal' diff to save as a patch for
    # emailing or later application
    patch = !git --no-pager diff --no-color

    #
    # Editing
    #
    # Editing/adding conflicted files
    edit-unmerged = "!f() { git diff --name-only --diff-filter=U ; }; ${EDITOR} `f`"

    add-unmerged = "!f() { git diff --name-only --diff-filter=U ; }; git add `f`"

    # Commit any files changes, squash them into the last commit and update
    # its date
    fixup-prev-ci = !git commit --all --amend --reuse-message=HEAD --date=\"$(date)\"

    # list files which have changed
    files = !git diff --name-only

    # diff stat instead of just names
    stat = !git diff --stat

    dt = "! args=$@; shift $#; nvim -c \"DiffviewOpen $args\""

    rE = "!f() { git restore -S $@ && git restore $@; }; f"

[i18n]
    # Character encoding the commit messages are converted to when running git
    # log and friends
    logOutputEncoding = utf-8

[merge]
    # Extend rename limit
    renamelimit = 0

    # delta will display diffs between the ancestral commit and each of the two
    # merge parents
    ; conflictstyle = diff3

[help]
    # Automatically correct and execute mistyped commands
    autocorrect = 1

[pull]
    # Preserve merges when you're rebasing against origin/BRANCH
    rebase = merges

[fetch]
    # Always prune when fetching and pulling
    prune = 1

[branch]
    # Rebase against tracking branch
    autoSetupRebase = always

[diff]
    # Specify the format in which differences in submodules are shown. The
    # "log" format lists the commits in the range like git-submodule summary
    # does
    submodule = log

    # Moved lines of code are colored differently
    colorMoved = default

[status]
    # submodule summary will be enabled and a summary of commits for modified
    # submodules will be shown
    submoduleSummary = true

[rerere]
    # Disable recording of resolved conflicts
    enabled = false

[rebase]
    # Enable --autosquash option by default
    autoSquash = true

    # Automatically create a temporary stash before the operation begins, and
    # apply it after the operation ends
    autoStash = true

[stash]
    # Show patch mode when use `git stash show`
    showPatch = true

[commit]
    # A boolean or int to specify the level of verbose with git commit
    verbose = true

    # All commits should be GPG signed
    gpgsign = true

[format]
    # Enable the -s/--signoff option by default in the patches
    signOff = true

[interactive]
    # Enable single key presses in Interactive Mode
    singlekey = true

#
# delta
#
[interactive]
    diffFilter = delta --color-only

[core]
    ; delta --side-by-side -w $COLUMNS;                            \
    ; delta --side-by-side -w $FZF_PREVIEW_COLUMNS;                \
    pager = "{                                                           \
        COLUMNS=$(tput cols);                                            \
        if [ $COLUMNS -ge 80 ] && [ -z $FZF_PREVIEW_COLUMNS ]; then      \
            delta -w $COLUMNS;                                           \
        elif [ $COLUMNS -ge 160 ] && [ ! -z $FZF_PREVIEW_COLUMNS ]; then \
            delta -w $FZF_PREVIEW_COLUMNS;                               \
        else                                                             \
            delta;                                                       \
        fi                                                               \
    }"

[delta]
    # use n and N to move between diff sections
    navigate = true
    line-numbers = false
    light = false
    side-by-side = false
    tabs = 2

#
# nvim
#
[core]
    editor = nvim
[diff]
    tool = nvimdiff
[difftool "nvimdiff"]
    cmd = nvim -c \"DiffviewOpen\"
[difftool]
    prompt = false

[core]
    excludesfile = ~/.gitignore

[sequence]
    editor = interactive-rebase-tool

[gitreview]
    # Gerrit username
    username = javier.tia

[credential "https://gitlab.com"]
   helper =
   helper = !/usr/bin/glab auth git-credential

[color]
    ui = auto

[sendemail]
    smtpencryption = tls
    smtpserver = smtp.gmail.com
    smtpserverport = 587
    ; smtpServer = /usr/bin/msmtp
    ; smtpServerOption = -v

# vim:ft=gitconfig ts=4 sw=4
