# vim:set ts=4 sw=4 et:
[user]
    name = Javier Tiá
    email = javier.tia@hpe.com

[core]
    editor = nvim

    # diff-so-fancy to call attention to areas of interest without being
    # visually distracting
    # less options
    # -F quit if one screen
    # -R show ANSI colors based in RAW control characters
    # -s squeeze blank lines
    # -X disable termcap [de]initialization strings to terminal
	pager = delta --dark

    # Verify if a command modifies a file in the work tree
    ; safecrlf = true

    # No output conversion is performed
    ; autocrlf = input

    # gitproxy is a script to allow clone git:// repositories
    ; gitproxy = gitproxy

[i18n]
    # Character encoding the commit messages are converted to when running git
    # log and friends
    logOutputEncoding = utf-8

[merge]
    tool = clion

    # Add ||||||| marker and the original text before the ======= marker
    # conflictstyle = diff3

    # Only fast-forward merges are allowed
    ; ff = only

    # Extend rename limit
    renamelimit = 0

[mergetool "clion"]
    cmd = clion merge \
        $(cd $(dirname "$LOCAL") && pwd)/$(basename "$LOCAL") \
        $(cd $(dirname "$REMOTE") && pwd)/$(basename "$REMOTE") \
        $(cd $(dirname "$BASE") && pwd)/$(basename "$BASE") \
        $(cd $(dirname "$MERGED") && pwd)/$(basename "$MERGED")
    trustExitCode = true

[mergetool "vimdiff"]
    # No prompt before each invocation of the merge resolution program
    prompt = false

[mergetool "bc"]
    trustExitCode = true

[help]
    # Automatically correct and execute mistyped commands
    autocorrect = 1

[alias]
    # Branch
    br = branch -vv
    brd = branch -D

    # Commit
    ci = commit

    # Checkout
    co = checkout
    cob = checkout -b

    st = status
    sts = status -s -b

    # Rebase
    rb = rebase
    rba = rebase --abort
    rbc = rebase --continue

    # Add origin commit from where picked
    cp = cherry-pick -x

    # Changes you have staged
    dc = diff --staged

    # Print the name of the current branch
    current = symbolic-ref --short HEAD

    ls = ls-files

    # Logs
    lol = log --topo-order --pretty=format:'%C(green)%h%C(reset) %s%C(red)%d%C(reset)'
    lg = log --topo-order --pretty=format:'%C(bold)Commit:%C(reset) %C(green)%H%C(red)%d%n%C(bold)Author:%C(reset) %C(cyan)%an <%ae>%n%C(bold)Date:%C(reset)   %C(blue)%ai (%ar)%C(reset)%n%+B'

    # List new commits, of current branch, have been created by last command
    # (typically used after a "git pull")
    new = "!f() { ref=$(git symbolic-ref --short HEAD); \
        git log ${ref}@{1}..${ref}@{0} \"$@\"; }; f"

    # Like <git new>, but it accepts branches as parameters, e.g.: git newp
    # origin/BRANCH
    newp = "!f() { git log ${1}@{1}..${1}@{0} \"$@\"; }; f"

    # Print the name of the current upstream tracking branch
    upstream = !git config --get branch.$(git current-branch).remote \
        || echo origin

    # Update local repo and all submodules
    spull = "!__git_spull() { git pull \"$@\" && \
        git submodule sync --recursive && \
        git submodule update --init --recursive; }; __git_spull"

    # Checkout our changes, leaves/gets theirs changes
    ours = "!f() { git checkout --ours -- $@ && git add $@; }; f"

    # Checkout theirs changes, leaves/gets ours changes
    theirs = "!f() { git checkout --theirs -- $@ && git add $@; }; f"

    # Show ours changes
    show-ours = !git-show :3:"${1}"

    # Show theirs changes
    show-theirs = !git-show :2:"${1}"

    # Summarizes commits, sort based on numbers commits and show each author
    # email
    score = shortlog -n -s -e

    # tells git to check whether the remote repo is the same as the one you're
    # trying to push up
    please = push --force-with-lease

    # For raw patches, a shortcut for a 'normal' diff to save as a patch for
    # emailing or later application
    patch = !git --no-pager diff --no-color

    #
    # Editing
    #
    # Editing/adding conflicted files
    edit-unmerged = "!f() { git diff --name-only --diff-filter=U ; }; \
        ${EDITOR} `f`"
    add-unmerged = "!f() { git diff --name-only --diff-filter=U ; }; \
        git add `f`"

    rh  = "!f() { git reset --hard HEAD~$1; }; f"
	rhh = "!f() { git reset --hard $1; }; f"
	rs  = "!f() { git reset --soft HEAD~$1; }; f"
	rsh = "!f() { git reset --soft $1; }; f"

    # search and replace text in the current repo:
    #
    #   git search-replace old_name new-new path
    search-replace = "!f() { \
        git grep -F --null --full-name --name-only -e \"$1\" -- $3 | \
        xargs -0 perl -i -p -e \"s#\\Q$1\\E#$2#g\"; }; f $1 $2 $3"

    # Commit any files changes, squash them into the last commit and update
    # its date
    fixup-prev-ci = !git commit --all --amend --reuse-message=HEAD \
        --date=\"$(date)\"

    # Select a file to edit with Vim
    pamvim = !FILES=$(git status -s | awk '{ print $2 }' | fzf -x -m) \
                && vim ${FILES}

[push]
    # In centralized workflow, work like upstream with an added safety to
    # refuse to push if the upstream branch’s name is different from the local
    # one
    default = simple

[pull]
    # Preserve merges when you're rebasing against origin/BRANCH
    rebase = merges

[fetch]
    # Always prune when fetching and pulling
    prune = 1

[branch]
    # Rebase against tracking branch
    autoSetupRebase = always

[diff]
    # Specify the format in which differences in submodules are shown. The
    # "log" format lists the commits in the range like git-submodule summary
    # does
    submodule = log

[difftool]
    prompt = false

[difftool "icdiff"]
    # Show the file labels correctly
    cmd = icdiff --line-numbers -L \"$BASE\" -L \"$REMOTE\" \"$LOCAL\" \"$REMOTE\"

[difftool "bc"]
    trustExitCode = true

[credential]
    # Set the cache to timeout after 8 hour (setting is in seconds)
    helper = cache --timeout=28800

[status]
    # submodule summary will be enabled and a summary of commits for modified
    # submodules will be shown
    submoduleSummary = true

[rerere]
    # Activate recording of resolved conflicts, so that identical conflict
    # hunks can be resolved automatically
    enabled = true

[rebase]
    # Enable --autosquash option by default
    autoSquash = true

    # Automatically create a temporary stash before the operation begins, and
    # apply it after the operation ends
    autoStash = true

[stash]
    # Show patch mode when use `git stash show`
    showPatch = true

[interactive]
    # Enable single key presses in Interactive Mode
    singlekey = true

[commit]
    # A boolean or int to specify the level of verbose with git commit
    verbose = true

#
# VM settings
#
[gitreview]
    # Gerrit username
    username = javier.tia

[sendemail]
    smtpServerPort = 587
    smtpserver = smtp3.hpe.com

[http]
    proxy = http://web-proxy.rose.hpecorp.net:8080
    sslverify = false

; [feature]
    ; experimental = true
    ; manyFiles = true
;
; [protocol]
    ; version = 2
