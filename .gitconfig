[user]
    name = Javier Tiá
    email = javier.tia@gmail.com

[core]
    editor = vim

    # -F quit if one screen
    # -R show ANSI colors based in RAW control characters
    # -s squeeze blank lines
    # -X disable termcap [de]initialization strings to terminal
    pager = less -FRsX

    # Verify if a command modifies a file in the work tree
    safecrlf = true

    # No output conversion is performed
    autocrlf = input

    # Notice trailing whitespace and space before tab
    whitespace = trailing-space,space-before-tab

[pager]
    # Call attention to areas of interest without being visually distracting
    log = diff-so-fancy | less --tabs=4 -RFX
    show = diff-so-fancy | less --tabs=4 -RFX
    diff = diff-so-fancy | less --tabs=4 -RFX
    difftool = true

[i18n]
    # Character encoding the commit messages are converted to when running git
    # log and friends
    logOutputEncoding = utf-8

[merge]
    # Use vimdiff to resolv conflicts
    tool = vimdiff

    # Add ||||||| marker and the original text before the ======= marker
    # conflictstyle = diff3

    # Only such fast-forward merges are allowed
    ff = only
    renamelimit = 3000

[mergetool]
    # No prompt before each invocation of the merge resolution program
    prompt = false

[help]
    # Automatically correct and execute mistyped commands
    autocorrect = 1

[alias]
    br = branch
    ci = commit
    co = checkout
    st = status
    ls = ls-files
    rb = rebase
    sm = submodule
    mg = merge

    # Add origin commit from where picked
    cp = cherry-pick -x

    # Changes you have staged
    dc = diff --staged

    # Changes you have staged using difftool by default
    dic = difftool --staged

    # Print the name of the current branch
    current-branch = symbolic-ref --short HEAD

    # Logs
    lol = log --graph --decorate --pretty=oneline --abbrev-commit
    lola = log --graph --decorate --pretty=oneline --abbrev-commit --all

    # List new commits, of current branch, have been created by last command
    # (typically used after a "git pull")
    new = "!f() { ref=$(git symbolic-ref --short HEAD); \
        git log ${ref}@{1}..${ref}@{0} \"$@\"; }; f"

    # Like <git new>, but it accepts branches as parameters, e.g.: git newp
    # origin/BRANCH
    newp = "!f() { git log ${1}@{1}..${1}@{0} \"$@\"; }; f"

    # Editing/adding conflicted files
    edit-unmerged = "!f() { git diff --name-only --diff-filter=U ; }; \
        ${EDITOR} `f`"
    add-unmerged = "!f() { git diff --name-only --diff-filter=U ; }; \
        git add `f`"

    # While the empty tree sha1 4b825dc642cb6eb9a060e54bf8d69288fbee4904
    # is known to git, you may need to generate it.
    # git diff --check $(git empty-tree-sha1)
    # empty-tree-sha1 = hash-object -t tree /dev/null

    # Un-apply a Stash
    stash-unapply = !git stash show -p | git apply -R

    # remove remote-tracking branches that were deleted from the remote repo
    # trim = !git remote prune origin && git gc

    # search and replace text in the current repo:
    #
    #   git search-replace old_name new-new
    search-replace = "!f() { \
        git grep -F --null --full-name --name-only -e \"$1\" -- . | \
        xargs -0 perl -i -p -e \"s#\\Q$1\\E#$2#g\"; }; \
        f $1 $2"

    # show local commits
    lc = "!f() { ref=$(git current-branch); git log \
        origin/${ref}..${ref} \"$@\"; }; f"

    last = "!f() { git log -1 \"$@\"; }; f"

    # Commit any files changes, squash them into the last commit and update
    # its date
    fixup-prev-ci = !git commit --all --amend --reuse-message=HEAD \
        --date=\"$(date)\"

    # Print the name of the current upstream tracking branch
    upstream = !git config --get branch.$(git current-branch).remote \
        || echo origin

    # Pull chosen branch and rebase current branch against to chosen branch
    rb-vs = "!f() { git fetch origin && git rebase origin/$1; }; f $1"

    # Update local repo and all submodules
    spull = "!__git_spull() { git pull \"$@\" && \
        git submodule sync --recursive && \
        git submodule update --init --recursive; }; __git_spull"

    # Push with submodule dependency checking
    spush = "push --recurse-submodules=on-demand"

    # Show diff for all submodules
    sdiff = !"git diff && git submodule foreach 'git diff'"

    # Update only all submodules
    supdate = "submodule update --remote --merge"

    # Share local repositories through git://HOST/ protocol
    # It must be run where are the .git repositories
    serve = !git daemon --base-path=. --export-all --reuseaddr \
        --informative-errors --verbose

    # Checkout our changes, leaves/gets theirs changes
    ours = "!f() { git checkout --ours -- $@ && git add $@; }; f"

    # Checkout theirs changes, leaves/gets ours changes
    theirs = "!f() { git checkout --theirs -- $@ && git add $@; }; f"

    # Show ours changes
    show-ours = !git-show :3:"${1}"

    # Show theirs changes
    show-theirs = !git-show :2:"${1}"

    show-tool = "!f() { git difftool $1^ $1; }; f"

    # Summarizes commits, sort based on numbers commits and show each author
    # email
    score = shortlog -n -s -e

    # Select a branch to checkout
    pam = !BRANCH=$(git branch | fzf) && git checkout ${BRANCH}

    # Select a file to add in Git
    pamadd = !FILES=$(git status -s | awk '{ print $2 }' | fzf -x -m) \
                && git add --all ${FILES}

    # Select a file to edit with Vim
    pamvim = !FILES=$(git status -s | awk '{ print $2 }' | fzf -x -m) \
                && vim ${FILES}

    # Pull Github Pull Request
    pr = "!f() { git fetch -fu ${2:-upstream} refs/pull/$1/head:pr/$1 \
           && git checkout pr/$1; }; f"

    # Clean all Github Pull Request
    pr-clean = "!git checkout dev ; \
        git for-each-ref refs/heads/pr/* --format=\"%(refname)\" \
        | while read ref ; do branch=${ref#refs/heads/}; \
        git branch -D $branch ; done"

    # Use it when there is not diff-so-fancy
    olog = !git --no-pager log
    oshow = !git --no-pager show
    odiff = !git --no-pager diff

    # tells git to check whether the remote repo is the same as the one you're
    # trying to push up
    please = push --force-with-lease

[push]
    # In centralized workflow, work like upstream with an added safety to
    # refuse to push if the upstream branch’s name is different from the local
    # one
    default = simple

[pull]
    # Preserve merges when you're rebasing against origin/BRANCH
    rebase = preserve

[fetch]
    # Always prune when fetching and pulling
    prune = 1

[branch]
    # Rebase against tracking branch
    autoSetupRebase = always

[diff]
    # Specify the format in which differences in submodules are shown. The
    # "log" format lists the commits in the range like git-submodule summary
    # does
    submodule = log

[difftool]
    prompt = false

[difftool "icdiff"]
    # Show the file labels correctly
    cmd = icdiff --line-numbers -L \"$BASE\" -L \"$REMOTE\" \"$LOCAL\" \"$REMOTE\"

[credential]
    # Set the cache to timeout after 8 hour (setting is in seconds)
    helper = cache --timeout=28800

[status]
    # submodule summary will be enabled and a summary of commits for modified
    # submodules will be shown
    submoduleSummary = true

[rerere]
    # Activate recording of resolved conflicts, so that identical conflict
    # hunks can be resolved automatically
    enabled = true

[rebase]
    # Enable --autosquash option by default
    autoSquash = true

    # Automatically create a temporary stash before the operation begins, and
    # apply it after the operation ends
    autoStash = true

[stash]
    # Show patch mode when use `git stash show`
    showPatch = true

[interactive]
    # Enable single key presses in Interactive Mode
    singlekey = true

[commit]
    # A boolean or int to specify the level of verbose with git commit
    verbose = true

[gitreview]
    # Gerrit username for Open Source projects
    username = jetm

[sendemail]
    smtpEncryption = tls
    smtpServer = smtp.gmail.com
    smtpUser = javier.tia@gmail.com
    smtpServerPort = 587

[apply]
    # Tells git apply how to handle whitespaces
    whitespace = fix
