[alias]
    # Print the name of the current branch
    current = symbolic-ref --short HEAD

    last = lg -1

    # Logs
    lol = log --topo-order --pretty=format:'%C(green)%h%C(reset) %s%C(red)%d%C(reset)'
    lg = log --topo-order --pretty=format:'%C(bold)Commit:%C(reset) %C(green)%H%C(red)%d%n%C(bold)Author:%C(reset) %C(cyan)%an <%ae>%n%C(bold)Date:%C(reset)   %C(blue)%ai (%ar)%C(reset)%n%+B'

    # List new commits, of current branch, have been created by last command
    # (typically used after a "git pull")
    new = "!f() { ref=$(git symbolic-ref --short HEAD); \
        git log ${ref}@{1}..${ref}@{0} \"$@\"; }; f"

    # Like <git new>, but it accepts branches as parameters, e.g.: git newp
    # origin/BRANCH
    newp = "!f() { git log ${1}@{1}..${1}@{0} \"$@\"; }; f"

    # Update local repo and all submodules
    spull = "!__git_spull() { git pull \"$@\" && \
        git submodule sync --recursive && \
        git submodule update --init --recursive; }; __git_spull"

    # Checkout our changes, leaves/gets theirs changes
    ours = "!f() { git checkout --ours -- $@ && git add $@; }; f"

    # Checkout theirs changes, leaves/gets ours changes
    theirs = "!f() { git checkout --theirs -- $@ && git add $@; }; f"

    # Show ours changes
    show-ours = !git-show :3:"${1}"

    # Show theirs changes
    show-theirs = !git-show :2:"${1}"

    # Summarizes commits, sort based on numbers commits and show each author
    # email
    score = shortlog -n -s -e

    # For raw patches, a shortcut for a 'normal' diff to save as a patch for
    # emailing or later application
    patch = !git --no-pager diff --no-color

    #
    # Editing
    #
    # Editing/adding conflicted files
    edit-unmerged = "!f() { git diff --name-only --diff-filter=U ; }; ${EDITOR} `f`"

    add-unmerged = "!f() { git diff --name-only --diff-filter=U ; }; git add `f`"

    # Commit any files changes, squash them into the last commit and update
    # its date
    fixup-prev-ci = !git commit --all --amend --reuse-message=HEAD --date=\"$(date)\"

[i18n]
    # Character encoding the commit messages are converted to when running git
    # log and friends
    logOutputEncoding = utf-8

[merge]
    # Extend rename limit
    renamelimit = 0

[help]
    # Automatically correct and execute mistyped commands
    autocorrect = 1

[pull]
    # Preserve merges when you're rebasing against origin/BRANCH
    rebase = merges

[fetch]
    # Always prune when fetching and pulling
    prune = 1

[branch]
    # Rebase against tracking branch
    autoSetupRebase = always

[diff]
    # Specify the format in which differences in submodules are shown. The
    # "log" format lists the commits in the range like git-submodule summary
    # does
    submodule = log
    colorMoved = default

[credential]
    # Set the cache to timeout after 8 hour (setting is in seconds)
    helper = cache --timeout=28800

[status]
    # submodule summary will be enabled and a summary of commits for modified
    # submodules will be shown
    submoduleSummary = true

[rerere]
    # Activate recording of resolved conflicts, so that identical conflict
    # hunks can be resolved automatically
    enabled = true

[rebase]
    # Enable --autosquash option by default
    autoSquash = true

    # Automatically create a temporary stash before the operation begins, and
    # apply it after the operation ends
    autoStash = true

[stash]
    # Show patch mode when use `git stash show`
    showPatch = true

[commit]
    # A boolean or int to specify the level of verbose with git commit
    verbose = true

[interactive]
    # Enable single key presses in Interactive Mode
    singlekey = true

#
# delta
#
[interactive]
    diffFilter = delta --color-only

[delta]
    line-numbers = false
    ; syntax-theme = Nord

[pager]
    diff = delta --dark
    log = delta --dark
    reflog = delta --dark
    show = delta --dark

#
# nvim
#
[core]
    editor = nvim
[diff]
    tool = nvimdiff
[difftool]
    prompt = false
[difftool "nvimdiff"]
    cmd = "nvim -d \"$LOCAL\" \"$REMOTE\""
[merge]
    tool = nvimdiff
[mergetool]
    prompt = true
[mergetool "nvimdiff"]
    cmd = "nvim -d \"$LOCAL\" \"$REMOTE\" \"$MERGED\" -c 'wincmd w' -c 'wincmd J'"

#
# VM settings
#
[user]
    name = Javier Ti√°
    email = javier.tia@hpe.com

[core]
    # gitproxy is a script to allow clone git:// repositories
    gitproxy = gitproxy

[gitreview]
    # Gerrit username
    username = javier.tia

[sendemail]
    smtpServerPort = 25
    ; smtpserver = G9W8453.americas.hpqcorp.net
    smtpserver = smtp3.hpe.com

[sequence]
    editor = /users/tiamarin/.zinit/plugins/git-interactive-rebase-tool/bin/interactive-rebase-tool

; [http]
;     proxy = http://web-proxy.rose.hpecorp.net:8080
;     sslverify = false

; [feature]
    ; experimental = true
    ; manyFiles = true
;
; [protocol]
    ; version = 2

# vim:set ts=4 sw=4 et:
