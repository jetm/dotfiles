#!/usr/bin/env bash

set -u

update_config=2
shells="$(basename $SHELL)"
prefix='~/.yocto'
prefix_expand=~/.yocto

help() {
  cat << EOF
usage: $0 [OPTIONS]

    --help          Show this message
    --add           Install Yocto cache setup
    --rm            Uninstall Yocto cache setup
EOF
}

main() {
  for opt in "$@"; do
    case $opt in
      --help)
        help
        exit 0
        ;;
      --add)
        add_yocto_cache_setup
        ;;
      --rm)
        rm_yocto_cache_setup
        ;;
      *)
        echo "unknown option: $opt"
        help
        exit 1
        ;;
    esac
  done
}

ask() {
  while true; do
    read -p "$1 ([y]/n) " -r
    REPLY=${REPLY:-"y"}
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      return 1
    elif [[ $REPLY =~ ^[Nn]$ ]]; then
      return 0
    fi
  done
}

for s in $shells; do
  if ! command -v "$s" > /dev/null; then
    shells=${shells/$s/}
  fi
done

if [[ ${#shells} -lt 3 ]]; then
  echo "No shell configuration to be updated."
  exit 1
fi

append_line() {
  set -e

  local update line file pat lno
  update="$1"
  line="$2"
  file="$3"
  pat="${4:-}"
  lno=""

  echo "Update $file:"
  echo "  - $line"
  if [ -f "$file" ]; then
    if [ $# -lt 4 ]; then
      lno=$(\grep -nF "$line" "$file" | sed 's/:.*//' | tr '\n' ' ')
    else
      lno=$(\grep -nF "$pat" "$file" | sed 's/:.*//' | tr '\n' ' ')
    fi
  fi
  if [ -n "$lno" ]; then
    echo "    - Already exists: line #$lno"
  else
    if [ $update -eq 1 ]; then
      [ -f "$file" ] && echo >> "$file"
      echo "$line" >> "$file"
      echo "    + Added"
    else
      echo "    ~ Skipped"
    fi
  fi
  echo
  set +e
}

create_file() {
  local file="$1"
  shift
  echo "Create $file:"
  for line in "$@"; do
    echo "    $line"
    echo "$line" >> "$file"
  done
  echo
}

add_yocto_cache_setup() {
  for shell in $shells; do
    src=${prefix_expand}.${shell}
    echo -n "Generate Yocto build settings $src ... "

cat > "$src" << EOF
  # Setup Yocto build cache
  # ---------
  export SSTATE_DIR=/var/cache/yocto_cache/sstate DL_DIR=/var/cache/yocto_cache/downloads
EOF
    echo "OK"
  done

  if [ $update_config -eq 2 ]; then
    echo
    ask "Do you want to update your shell configuration files?"
    update_config=$?
  fi

  if [ $update_config -eq 1 ]; then
    echo
    for shell in $shells; do
      [ $shell = zsh ] && dest=${ZDOTDIR:-~}/.zshrc || dest=~/.bashrc
      append_line $update_config "[ -f ${prefix}.${shell} ] && source ${prefix}.${shell}" "$dest" "${prefix}.${shell}"
    done

    echo 'Finished. Restart your shell or reload config file.'
    if [[ "$shells" =~ bash ]]; then
      echo -n '   source ~/.bashrc  # bash'
      echo
    fi
    [[ "$shells" =~ zsh ]]  && echo "   source ${ZDOTDIR:-~}/.zshrc   # zsh"
  fi
}

remove() {
  echo "Remove $1"
  rm -f "$1"
}

remove_line() {
  src=$1
  echo "Remove from $1:"

  shift
  line_no=1
  match=0
  while [ -n "${1:-}" ]; do
    line=$(sed -n "$line_no,\$p" "$src" | \grep -m1 -nF "$1")
    if [ $? -ne 0 ]; then
      shift
      line_no=1
      continue
    fi
    line_no=$(( $(sed 's/:.*//' <<< "$line") + line_no - 1 ))
    content=$(sed 's/^[0-9]*://' <<< "$line")
    match=1
    echo    "  - Line #$line_no: $content"
    [ "$content" = "$1" ] || ask "    - Remove?"
    if [ $? -eq 0 ]; then
      temp=$(mktemp)
      awk -v n=$line_no 'NR == n {next} {print}' "$src" > "$temp" &&
        cat "$temp" > "$src" && rm -f "$temp" || break
      echo  "      - Removed"
    else
      echo  "      - Skipped"
      line_no=$(( line_no + 1 ))
    fi
  done
  [ $match -eq 0 ] && echo "  - Nothing found"
}

rm_yocto_cache_setup() {
  for shell in $shells; do
    shell_config=${prefix_expand}.${shell}
    remove "${shell_config}"
    remove_line ~/.${shell}rc \
      "[ -f ${prefix}.${shell} ] && source ${prefix}.${shell}" \
      "source ${prefix}.${shell}"
  done
}

main "$@"
