" General behavior
set autowrite       " auto saves changes when quitting and swiching buffer
set autoread        " Set to auto read when a file is changed from the outside
set nobackup        " do not keep a backup file
set magic           " Set magic on, for regular expressions
set ttyfast         " smoother changes
set wrap            " enable wrap line

set pastetoggle=<F2>

autocmd FileType sh,awk,zsh setlocal tabstop=2 shiftwidth=2 softtabstop=2

" git commits
"autocmd FileType gitcommit setlocal spell
"au BufNewFile,BufRead *.git/COMMIT_EDITMSG set tw=72 noai noshowmatch
"au BufNewFile,BufRead *.git/COMMIT_EDITMSG setlocal spell spelllang=en_us"

" Sudo to write
map <leader>W :w !sudo tee % >/dev/null<CR>

"
" Trim trailing whitespace
"
function! ShowSpaces(...)
  let @/='\v(\s+$)|( +\ze\t)'
  let oldhlsearch=&hlsearch
  if !a:0
    let &hlsearch=!&hlsearch
  else
    let &hlsearch=a:1
  end
  return oldhlsearch
endfunction

function! TrimSpaces() range
  let oldhlsearch=ShowSpaces(1)
  execute a:firstline.",".a:lastline."substitute ///gec"
  let &hlsearch=oldhlsearch
endfunction

command! -bar -nargs=? ShowSpaces call ShowSpaces(<args>)
command! -bar -nargs=0 -range=% TrimSpaces <line1>,<line2>call TrimSpaces()
nnoremap <F12>           :ShowSpaces 1<CR>
nnoremap <Leader><F12>   m`:TrimSpaces<CR>``
vnoremap <Leader><S-F12> :TrimSpaces<CR>

highlight ExtraWhitespace ctermbg=red guibg=red
au ColorScheme * highlight ExtraWhitespace guibg=red
au BufEnter * match ExtraWhitespace /\s\+$/
au InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
au InsertLeave * match ExtraWhiteSpace /\s\+$/

"
" Settings indenting colors
"
let g:indent_guides_auto_colors = 0
let indent_guides_color_change_percent = 10
let indent_guides_guide_size = 1
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=darkgrey ctermbg=236
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=darkgrey ctermbg=237

"
" Perl Stuff
"
" my perl includes pod
let perl_include_pod = 1

" syntax color complex things like @{${"foo"}}
let perl_extended_vars = 1

if has("gui_running")
    colorscheme jellybeans
    set guifont=Ubuntu\ Mono\ 12
    set lines=50 columns=140
end

"
" YouCompleteMe settings
"
" Avoid to ask load ycm_extra_conf.py configuration
" let g:ycm_confirm_extra_conf = 0

"
" Syntastic settings
"
" Enable it to work with YouCompleteMe
"let g:syntastic_check_on_open=1
"let g:syntastic_enable_signs=1

" UltiSnip settings
"
" Force to use Python 2, instead of Python 3
"let g:UltiSnipsUsePythonVersion = 2
"let g:UltiSnipsNoPythonWarning = 1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" My settings for C development
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

au BufNewFile,BufRead,BufEnter *.c,*.cpp,*.h set omnifunc=ccomplete#Complete

"
" cscope settings
"
if has("cscope")
    " use both cscope and ctag for 'ctrl-]', ':ta', and 'vim -t'
    " set cscopetag

    " check cscope for definition of a symbol before checking ctags
    " set to 1 if you want the reverse search order.
    set csto=0

    set cst
    set nocsverb
endif

"
" ctags settings
"
" Search upward
" set tags=./tags;.git/tags;/

"
" Plugins disabled
"
UnBundle 'mattn/gist-vim'
UnBundle 'mhinz/vim-signify'
UnBundle 'mattn/webapi-vim'
UnBundle 'Puppet-Syntax-Highlighting'

