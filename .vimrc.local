" General behavior
set autowrite       " auto saves changes when quitting and switching buffer
set autoread        " Set to auto read when a file is changed from the outside
set nobackup        " do not keep a backup file
set magic           " Set magic on, for regular expressions
set wrap            " enable wrap line
set ttyfast         " smoother changes in terminals

"
" CHECK: Remember for mapping new key
" :verbose map <KEY> is new key is not working anymore, e.g.: vimviews
"

set pastetoggle=<F2>

"
" Colors and GUI settings
"
if has("gui_running")
  set background=dark
  set guifont=Input\ Mono\ Narrow\ Semi-Condensed\ 11
  colorscheme jellybeans "Optional gruvbox
  set lines=35 columns=90
end

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Key mapping general settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"
" git commits settings
"
autocmd FileType gitcommit setlocal spell
au BufNewFile,BufRead *.git/COMMIT_EDITMSG set tw=72 noai noshowmatch
au BufNewFile,BufRead *.git/COMMIT_EDITMSG setlocal spell spelllang=en_us

" Write
nnoremap <Leader>w :w<CR>

" sudo to write
map <leader>W :w !sudo tee % >/dev/null<CR>

"
" Buffergator plugin settings
"

" No use default keymaps
let g:buffergator_suppress_keymaps = 1

" View the entire list of buffers open
nmap <leader>b :BuffergatorOpen<CR>

" Close current buffer
nmap <leader>B :bp <BAR> bd #<CR>

" updated when the buffer list changes
let g:buffergator_autoupdate = 1

" Uses bottom window to open buffer list
let g:buffergator_viewport_split_policy = 'B'

" Avoid autoexpand
let g:buffergator_autoexpand_on_split = 0

" height of the Buffergator window in any horizontal splitting mode
let g:buffergator_hsplit_size = 5

"
" Expand Region plugin settings
"
" Expand selection from one character to whole file
" vmap v <Plug>(expand_region_expand)
" vmap <C-v> <Plug>(expand_region_shrink)

" Stop that stupid window from popping up:
map q: :q

"
" Settings trim trailing whitespace
"
nnoremap <F12> :StripWhitespace<CR>
highlight ExtraWhitespace ctermbg=88 guifg=#870000

"
" investigate plugin settings
"
let g:investigate_command_for_python = '/usr/bin/zeal --query ^s'
nnoremap gz :!zeal --query "<cword>"&<CR><CR>

" I do want trim them automatically, sometimes no need to
let g:spf13_keep_trailing_whitespace = 1

"
" Settings indenting colors
"
let g:indent_guides_auto_colors = 0
let indent_guides_color_change_percent = 10
let indent_guides_guide_size = 1
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=darkgrey ctermbg=236
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=darkgrey ctermbg=237

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Languages settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
" Shell settings
"
autocmd FileType sh,awk,zsh setlocal tabstop=2 shiftwidth=2 softtabstop=2

"
" Perl settings
"
" my perl includes pod
let perl_include_pod = 1

" syntax color complex things like @{${"foo"}}
let perl_extended_vars = 1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Settings for C/C++ development
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Detect if the current file type is a C-like language.
au BufNewFile,BufRead c,cpp,objc,*.mm,*.cc,*.h call SetupForCLang()

" Configuration for C-like languages, based in Google C/C++ Style Guide
function! SetupForCLang()
  " Highlight lines longer than 80 characters.
  " au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)

  " Alternately, uncomment these lines to wrap at 80 characters.
  setlocal textwidth=80
  setlocal wrap

  " Use 2 spaces for indentation.
  setlocal shiftwidth=2
  setlocal tabstop=2
  setlocal softtabstop=2
  setlocal expandtab

  " Configure auto-indentation formatting.
  setlocal cindent
  setlocal cinoptions=h1,l1,g1,t0,i4,+4,(0,w1,W4
  setlocal indentexpr=GoogleCppIndent()
  let b:undo_indent = "setl sw< ts< sts< et< tw< wrap< cin< cino< inde<"
endfunction

" From https://github.com/vim-scripts/google.vim/blob/master/indent/google.vim
function! GoogleCppIndent()
  let l:cline_num = line('.')

  let l:orig_indent = cindent(l:cline_num)

  if l:orig_indent == 0 | return 0 | endif

  let l:pline_num = prevnonblank(l:cline_num - 1)
  let l:pline = getline(l:pline_num)
  if l:pline =~# '^\s*template' | return l:pline_indent | endif

  " TODO: I don't know to correct it:
  " namespace test {
  " void
  " ....<-- invalid cindent pos
  "
  " void test() {
  " }
  "
  " void
  " <-- cindent pos
  if l:orig_indent != &shiftwidth | return l:orig_indent | endif

  let l:in_comment = 0
  let l:pline_num = prevnonblank(l:cline_num - 1)
  while l:pline_num > -1
    let l:pline = getline(l:pline_num)
    let l:pline_indent = indent(l:pline_num)

    if l:in_comment == 0 && l:pline =~ '^.\{-}\(/\*.\{-}\)\@<!\*/'
      let l:in_comment = 1
    elseif l:in_comment == 1
      if l:pline =~ '/\*\(.\{-}\*/\)\@!'
        let l:in_comment = 0
      endif
    elseif l:pline_indent == 0
      if l:pline !~# '\(#define\)\|\(^\s*//\)\|\(^\s*{\)'
        if l:pline =~# '^\s*namespace.*'
          return 0
        else
          return l:orig_indent
        endif
      elseif l:pline =~# '\\$'
        return l:orig_indent
      endif
    else
      return l:orig_indent
    endif

    let l:pline_num = prevnonblank(l:pline_num - 1)
  endwhile

  return l:orig_indent
endfunction

"
" YouCompleteMe plugin settings
"
" Avoid to ask load ycm_extra_conf.py configuration
let g:ycm_confirm_extra_conf = 0

" Show the full function prototype and all the function overloads in the
" window if the current completion is a function name
let g:ycm_add_preview_to_completeopt = 1

" Auto-close the 'preview' window after the user accepts the offered
" completion string
let g:ycm_autoclose_preview_window_after_completion = 1

" Auto-close the preview window after the user leaves insert mode
let g:ycm_autoclose_preview_window_after_insertion = 1

" Control number of characters user needs to type before identifier-based
" completion suggestions are trigger
let g:ycm_min_num_identifier_candidate_chars = 4

" YCM identifier completer will also collect identifiers from tags files
let g:ycm_collect_identifiers_from_tags_files = 1

" Diagnostics error symbol
let g:ycm_error_symbol = '✗'

" Diagnostics warning symbol
let g:ycm_warning_symbol = '⚠'

let g:ycm_always_populate_location_list = 0

" Compile and diagnostics
au FileType c,cpp,*.h nnoremap <F5> :YcmForceCompileAndDiagnostics<CR>

" Key mappings used to select completion string
let g:ycm_key_list_select_completion = ['<TAB>', '<Down>']
let g:ycm_key_list_previous_completion = ['<S-TAB>', '<Up>']

" Try to do the same than GoToDefinition and GoToDeclarion
au FileType c,cpp,*.h nnoremap <leader>gt :YcmCompleter GoTo<CR>

" TODO: consider use this settings later
"nnoremap <leader>pd :YcmCompleter GoToDefinition<CR>
"nnoremap <leader>pc :YcmCompleter GoToDeclaration<CR>

" TODO: Consider add a global file
"let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'

"
" Syntastic plugin settings
"
" Recommended plugin settings
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

let g:syntastic_error_symbol = '✗'
let g:syntastic_warning_symbol = '⚠'

" Build current file with Ctrl-c
au FileType c,cpp nnoremap <C-c> :call SendFileViaVtr()<CR>

function! SendFileViaVtr()
  " Put here other definitions to be execute in a tmux pane
  let runners = {
    \ 'c': 'do-c'
    \ }
  if has_key(runners, &filetype)
    let runner = runners[&filetype]
    let local_file_path = expand('%')
    execute join(['VtrSendCommandToRunner!', runner, local_file_path])
  else
    echoerr 'Unable to determine runner'
  endif
endfunction

let g:VtrOrientation = "h"
let g:VtrPercentage = 50

"
" cscope settings
"
if has("cscope")
  " use both cscope and ctag for 'ctrl-]', ':ta', and 'vim -t'
  " set cscopetag

  " check cscope for definition of a symbol before checking ctags
  " set to 1 if you want the reverse search order.
  set csto=0

  set cst
  set nocsverb
endif

"
" ctags settings
"
" Show Tagbar with F3 key, less error than ,tt using together with tmux
au FileType c,cpp,*.h nnoremap <F3> :TagbarToggle<CR><C-w>=

"
" vim-cpp-enhanced-highlight plugin settings
"
let g:cpp_class_scope_highlight = 1
let g:cpp_experimental_template_highlight = 1

"
" fswitch plugin settings
"
" handles files with .cc extension, .cc first before .cpp
au BufEnter *.h let b:fswitchdst = 'cc,cpp,c'
au BufEnter *.cc let b:fswitchdst = 'h'

" Creates a new window on the left and opens the companion file in it
au FileType c,cc,cpp,*.h nnoremap <Leader>s :FSHere<CR>

"
" Rainbow plugin settings
"
" Only for c/cpp file type
au FileType c,cpp call rainbow#load()

" Change rainbow default colors
let g:rainbow_ctermfgs = [ 'brown', 'Darkblue', 'darkgray', 'darkgreen' ]

"
" clighter plugin settings
"
" TODO: Enable it when there is not conflict con CtrlP plugin
let g:clighter_autostart = 0
let g:clighter_libclang_file = '/usr/lib64/libclang.so'
let g:clighter_cursor_hl_mode = 1

" Change clighter default colors
hi clighterMacroInstantiation term=NONE cterm=NONE ctermbg=236 ctermfg=248 gui=NONE
hi clighterTypeRef term=NONE cterm=NONE ctermbg=236 ctermfg=248 gui=NONE
hi clighterClassDecl term=NONE cterm=NONE ctermbg=236 ctermfg=248 gui=NONE
hi clighterStructDecl term=NONE cterm=NONE ctermbg=236 ctermfg=248 gui=NONE
hi clighterEnumDecl term=NONE cterm=NONE ctermbg=236 ctermfg=248 gui=NONE
hi clighterEnumConstantDecl term=NONE cterm=NONE ctermbg=236 ctermfg=248 gui=NONE
hi clighterDeclRefExprEnum term=NONE cterm=NONE ctermbg=236 ctermfg=248 gui=NONE
hi clighterCursorSymbolRef term=NONE cterm=NONE ctermbg=236 ctermfg=248 gui=NONE
hi clighterFunctionDecl term=NONE cterm=NONE ctermbg=236 ctermfg=248 gui=NONE
hi clighterDeclRefExprCall term=NONE cterm=NONE ctermbg=236 ctermfg=248 gui=NONE
hi clighterMemberRefExpr term=NONE cterm=NONE ctermbg=236 ctermfg=248 gui=NONE
hi clighterNamespace term=NONE cterm=NONE ctermbg=236 ctermfg=248 gui=NONE

"
" vim-autoformat plugin settings
"
noremap <C-F> :Autoformat<CR>

let g:formatters_c = ['clangformat']
let g:formatters_cpp = ['clangformat']

" C/C++ Code Style based on Google
let g:formatdef_clangformat = "'clang-format -lines='.a:firstline.':'.a:lastline.' --assume-filename='.bufname('%').' -style=\"{BasedOnStyle: Google, AlignTrailingComments: true, '.(&textwidth ? 'ColumnLimit: '.&textwidth.', ' : '').(&expandtab ? 'UseTab: Never, IndentWidth: '.shiftwidth() : 'UseTab: Always').'}\"'"

"
" vim-flavored-markdown plugin settings
"
augroup markdown
  au!
  au BufNewFile,BufRead *.md,*.markdown setlocal filetype=ghmarkdown
augroup END

"
" vim-commentary plugin settings
"
autocmd FileType cmake set commentstring=#\ %s

"
" nerd-commenter plugin settings
"
" Add extra space around delimiters when commenting, remove them when
" uncommenting
let g:NERDSpaceDelims = 1

" Always remove the extra spaces when uncommenting regardless of whether
" NERDSpaceDelims is set
let g:NERDRemoveExtraSpaces = 1

"
" vim-cscope-ctags plugin settings
"
" Add language of source file of tags, useful for YCM
let g:cscope_utils_ctags_extra_args = ["--fields=+l"]

" vim:tw=78:ts=2:sw=2
