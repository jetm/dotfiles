" General behavior
set autowrite       " auto saves changes when quitting and swiching buffer
set autoread        " Set to auto read when a file is changed from the outside
set nobackup        " do not keep a backup file
set magic           " Set magic on, for regular expressions
set ttyfast         " smoother changes
set wrap            " enable wrap line

set pastetoggle=<F2>

autocmd FileType sh,awk,zsh setlocal tabstop=2 shiftwidth=2 softtabstop=2

" git commits
autocmd FileType gitcommit setlocal spell
au BufNewFile,BufRead *.git/COMMIT_EDITMSG set tw=72 noai noshowmatch
au BufNewFile,BufRead *.git/COMMIT_EDITMSG setlocal spell spelllang=en_us"

" Sudo to write
map <leader>W :w !sudo tee % >/dev/null<CR>

"
" Trim trailing whitespace
"
function! ShowSpaces(...)
  let @/='\v(\s+$)|( +\ze\t)'
  let oldhlsearch=&hlsearch
  if !a:0
    let &hlsearch=!&hlsearch
  else
    let &hlsearch=a:1
  end
  return oldhlsearch
endfunction

function! TrimSpaces() range
  let oldhlsearch=ShowSpaces(1)
  execute a:firstline.",".a:lastline."substitute ///gec"
  let &hlsearch=oldhlsearch
endfunction

command! -bar -nargs=? ShowSpaces call ShowSpaces(<args>)
command! -bar -nargs=0 -range=% TrimSpaces <line1>,<line2>call TrimSpaces()
nnoremap <F12>           :ShowSpaces 1<CR>
nnoremap <Leader><F12>   m`:TrimSpaces<CR>``
vnoremap <Leader><S-F12> :TrimSpaces<CR>

highlight ExtraWhitespace ctermbg=red guibg=red
au ColorScheme * highlight ExtraWhitespace guibg=red
au BufEnter * match ExtraWhitespace /\s\+$/
au InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
au InsertLeave * match ExtraWhiteSpace /\s\+$/

"
" Settings indenting colors
"
let g:indent_guides_auto_colors = 0
let indent_guides_color_change_percent = 10
let indent_guides_guide_size = 1
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=darkgrey ctermbg=236
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=darkgrey ctermbg=237

"
" Perl Stuff
"
" my perl includes pod
let perl_include_pod = 1

" syntax color complex things like @{${"foo"}}
let perl_extended_vars = 1

if has("gui_running")
    colorscheme jellybeans
    set guifont=Monospace\ 10.7
    set lines=60 columns=140
end

"
" YouCompleteMe settings
"
" Avoid to ask load ycm_extra_conf.py configuration
" let g:ycm_confirm_extra_conf = 0

"
" Syntastic settings
"
" Enable it to work with YouCompleteMe
"let g:syntastic_check_on_open=1
"let g:syntastic_enable_signs=1

" UltiSnip settings
"
" Force to use Python 2, instead of Python 3
"let g:UltiSnipsUsePythonVersion = 2
"let g:UltiSnipsNoPythonWarning = 1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" My settings for C development
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

au BufNewFile,BufRead,BufEnter *.c,*.h set omnifunc=ccomplete#Complete

"
" cscope settings
"
" @FIXME Clean these settings when cscope has been tested
"
if has("cscope")
    " use both cscope and ctag for 'ctrl-]', ':ta', and 'vim -t'
    " set cscopetag

    " check cscope for definition of a symbol before checking ctags
    " set to 1 if you want the reverse search order.
    set csto=0

    set cst
    set nocsverb

    """"""""""""" My cscope/vim key mappings
    "
    " The following maps all invoke one of the following cscope search types:
    "
    "   'c'   calls    : find all calls to the function name under cursor
    "   'd'   called   : find functions that function under cursor calls
    "   'e'   egrep    : egrep search for the word under cursor
    "   'f'   file     : open the filename under cursor
    "   'g'   global   : find global definition(s) of the token under cursor
    "   'i'   includes : find files that include the filename under cursor
    "   's'   symbol   : find all references to the token under cursor
    "   't'   text     : find all instances of the text under cursor
    "
    " Below are three sets of the maps: one set that just jumps to your
    " search result, one that splits the existing vim window horizontally and
    " displays your search result in the new window, and one that does the same
    " thing, but does a vertical split instead (vim 6 only).
    "
    " I've used CTRL-\ and CTRL-@ as the starting keys for these maps, as it's
    " unlikely that you need their default mappings (CTRL-\'s default use is
    " as part of CTRL-\ CTRL-N typemap, which basically just does the same
    " thing as hitting 'escape': CTRL-@ doesn't seem to have any default use).
    " If you don't like using 'CTRL-@' or CTRL-\, , you can change some or all
    " of these maps to use other keys.  One likely candidate is 'CTRL-_'
    " (which also maps to CTRL-/, which is easier to type).  By default it is
    " used to switch between Hebrew and English keyboard mode.
    "
    " All of the maps involving the <cfile> macro use '^<cfile>$': this is so
    " that searches over '#include <time.h>" return only references to
    " 'time.h', and not 'sys/time.h', etc. (by default cscope will return all
    " files that contain 'time.h' as part of their name).

    nmap <C-@><C-@> :cs find s <C-R>=expand("<cword>")<CR><CR>

    " To do the first type of search, hit 'CTRL-\', followed by one of the
    " cscope search types above (s,g,c,t,e,f,i,d).  The result of your cscope
    " search will be displayed in the current window.  You can use CTRL-T to
    " go back to where you were before the search.
    "

    "nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
    "nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
    "nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
    "nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
    "nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
    "nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
    "nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    "nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>


    " Using 'CTRL-spacebar' (intepreted as CTRL-@ by vim) then a search type
    " makes the vim window split horizontally, with search result displayed in
    " the new window.
    "
    " (Note: earlier versions of vim may not have the :scs command, but it
    " can be simulated roughly via:
    "    nmap <C-@>s <C-W><C-S> :cs find s <C-R>=expand("<cword>")<CR><CR>

    "nmap <C-@>s :scs find s <C-R>=expand("<cword>")<CR><CR>
    "nmap <C-@>g :scs find g <C-R>=expand("<cword>")<CR><CR>
    "nmap <C-@>c :scs find c <C-R>=expand("<cword>")<CR><CR>
    "nmap <C-@>t :scs find t <C-R>=expand("<cword>")<CR><CR>
    "nmap <C-@>e :scs find e <C-R>=expand("<cword>")<CR><CR>
    "nmap <C-@>f :scs find f <C-R>=expand("<cfile>")<CR><CR>
    "nmap <C-@>i :scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    "nmap <C-@>d :scs find d <C-R>=expand("<cword>")<CR><CR>


    " Hitting CTRL-space *twice* before the search type does a vertical
    " split instead of a horizontal one (vim 6 and up only)
    "
    " (Note: you may wish to put a 'set splitright' in your .vimrc
    " if you prefer the new window on the right instead of the left

    "nmap <C-@><C-@>s :vert scs find s <C-R>=expand("<cword>")<CR><CR>
    "nmap <C-@><C-@>g :vert scs find g <C-R>=expand("<cword>")<CR><CR>
    "nmap <C-@><C-@>c :vert scs find c <C-R>=expand("<cword>")<CR><CR>
    "nmap <C-@><C-@>t :vert scs find t <C-R>=expand("<cword>")<CR><CR>
    "nmap <C-@><C-@>e :vert scs find e <C-R>=expand("<cword>")<CR><CR>
    "nmap <C-@><C-@>f :vert scs find f <C-R>=expand("<cfile>")<CR><CR>
    "nmap <C-@><C-@>i :vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    "nmap <C-@><C-@>d :vert scs find d <C-R>=expand("<cword>")<CR><CR>

endif

"
" ctags settings
"
" Search upward
" set tags=./tags;.git/tags;/

"
" Plugins disabled
"
UnBundle 'mattn/gist-vim'
UnBundle 'mhinz/vim-signify'
UnBundle 'mattn/webapi-vim'
UnBundle 'Puppet-Syntax-Highlighting'

