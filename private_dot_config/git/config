# Git config for all repositories inside of work/
[includeIf "gitdir:**/repos/work/**"]
    path = ~/.gitconfig-work

[includeIf "gitdir:**/repos/work/**"]
    path = ~/.git-send-email-work.conf

# Git config for all repositories inside of personal/
[includeIf "gitdir:**/repos/personal/**"]
    path = ~/.gitconfig-personal

[includeIf "gitdir:~/Dropbox/**"]
    path = ~/.gitconfig-personal

[includeIf "gitdir:~/.local/share/chezmoi/**"]
    path = ~/.gitconfig-personal

[user]
    name = Javier Tia

[safe]
    directory = *

[init]
    defaultBranch = main

[column]
    # show in columns if the output is to the terminal
    ui = auto

[alias]
    # Print the name of the current branch
    current = symbolic-ref --short HEAD

    # List new commits, of current branch, have been created by last command
    # (typically used after a "git pull")
    new = "!f() { ref=$(git symbolic-ref --short HEAD); \
        git log ${ref}@{1}..${ref}@{0} \"$@\"; }; f"

    # Like <git new>, but it accepts branches as parameters, e.g.: git newp
    # origin/BRANCH
    newp = "!f() { git log ${1}@{1}..${1}@{0} \"$@\"; }; f"

    # Update local repo and all submodules
    pull-submodules = "!__git_spull() { git pull \"$@\" && \
        git submodule sync --recursive && \
        git submodule update --init --recursive; }; __git_spull"

    # Checkout our changes, leaves/gets theirs changes
    ours = "!f() { git checkout --ours -- $@ && git add $@; }; f"

    # Checkout theirs changes, leaves/gets ours changes
    theirs = "!f() { git checkout --theirs -- $@ && git add $@; }; f"

    # Show ours changes
    show-ours = !git-show :3:"${1}"

    # Show theirs changes
    show-theirs = !git-show :2:"${1}"

    # Summarizes commits, sort based on numbers commits and show each author
    # email
    score = shortlog -n -s -e

    # For raw patches, a shortcut for a 'normal' diff to save as a patch for
    # emailing or later application
    patch = !git --no-pager diff --no-color

    #
    # Editing
    #
    # Editing/adding conflicted files
    edit-unmerged = "!f() { git diff --name-only --diff-filter=U ; }; ${EDITOR} `f`"

    add-unmerged = "!f() { git diff --name-only --diff-filter=U ; }; git add `f`"

    # list files which have changed
    files = !git diff --name-only

    rE = "!f() { git restore -S $@ && git restore $@; }; f"

    # Pull, Rebase, Origin Master/Main branch
    rebase-origin = "!git pull --rebase origin $(git remote show origin | grep 'HEAD branch' | cut -d' ' -f5)"

    # Logs
    lol = log --topo-order --oneline
    lg = log --topo-order
    last = lg -1

    # Difftastic logs
    ld = -c diff.external=difft lg --ext-diff -p
    sd = -c diff.external=difft show --ext-diff
    dd = -c diff.external=difft diff --ext-diff

    ignore = "!gi() { local IFS=','; curl -sL https://www.toptal.com/developers/gitignore/api/\"$*\"; }; gi"

[core]
    editor = nvim

    # Global gitignore
    excludesfile = ~/.config/git/ignore

    # Global attributesfile
    attributesfile = ~/.config/git/attributes

[feature]
    ; Enable config options that optimize for repos with many files in the
    ; working directory
    manyfiles = true

[i18n]
    # Character encoding the commit messages are converted to when running git
    # log and friends
    logOutputEncoding = utf-8

[merge]
    # Extend rename limit
    renamelimit = 0

    ; similar to diff3 but removes matching lines on the two sides from the
    ; conflict region when those matching lines appear near either the beginning
    ; or end of a conflict region
    conflictstyle = zdiff3

[merge "mergiraf"]
    name = mergiraf
    driver = mergiraf merge --git %O %A %B -s %S -x %X -y %Y -p %P -l %L

[help]
    # Automatically correct and execute mistyped commands
    autocorrect = prompt

[push]
    # automatically setup an upsteam tracking when you run git push from a new branch
    autoSetupRemote = true
    default = simple
    followTags = true

[pull]
    # Preserve merges when you're rebasing against origin/BRANCH
    rebase = merges

[fetch]
    # Always prune when fetching and pulling
    prune = true
    prunetags = true
    all = true

[branch]
    # Rebase against tracking branch
    autoSetupRebase = always

    # Sort branch by the commit date
    sort = -committerdate

[diff]
    # Specify the format in which differences in submodules are shown. The
    # "log" format lists the commits in the range like git-submodule summary
    # does
    submodule = log

    # Moved lines of code are colored differently
    ; colorMoved = default
    colorMoved = plain
    colorMovedWS = allow-indentation-change

    # Extends patience algorithm to support low-occurrence common elements
    algorithm = histogram

    ; git diff uses a prefix pair that is different from the standard a/ and b/
    ; depending on what is being compared. When this configuration is in effect
    mnemonicPrefix = true

    ; Detect renames
    renames = true

[status]
    # submodule summary will be enabled and a summary of commits for modified
    # submodules will be shown
    submoduleSummary = true

[rerere]
    # Disable recording of resolved conflicts
    enabled = false

[rebase]
    # Enable --autosquash option by default
    autoSquash = true

    # Automatically create a temporary stash before the operation begins, and
    # apply it after the operation ends
    autoStash = true

    # Automatically force-update any branches that point to commits that are
    # being rebased
    updateRefs = true

[stash]
    # Show patch mode when use `git stash show`
    showPatch = true

[commit]
    # A boolean or int to specify the level of verbose with git commit
    verbose = true

    # All commits should be GPG signed
    gpgsign = true

[format]
    # Enable the -s/--signoff option by default in the patches
    signOff = true
    pretty = %C(auto)Commit:%C(reset) %C(auto)%H%d%n%C(reset)Author: %an <%ae>%nDate:   %ai (%ar)%n%+B%C(reset)

[interactive]
    # Enable single key presses in Interactive Mode
    singlekey = true
    diffFilter = "riff --color=on"

[grep]
    lineNumber = true
    patternType = perl

[log]
    # display dates as 2023-05-25 13:54:51 instead of Thu May 25 13:54:51 2023
    date = iso

[maintenance]
    auto = false
    strategy = incremental
    repo = ~/repos/work/linux-stable

[tag]
    sort = version:refname

[apply]
    # Detect whitespace errors when applying a patch
    whitespace = fix

[pager]
    # Use a pager if the difftool output is larger than one screenful,
    # consistent with the behaviour of `git diff`.
    difftool = false
    # riff and difftastic doesn't work with forgit
    diff = delta
    ; show = riff
    ; log  = riff

#
# diff tools
#
[difftool]
    # Run the difftool immediately, don't ask 'are you sure' each time.
    prompt = false

; difftastic diff tool
[diff]
    # Set difftastic as the default difftool, so we don't need to specify
    # `-t difftastic` every time.
    tool = difftastic

[difftool "difftastic"]
    cmd = difft "$LOCAL" "$REMOTE"

[sequence]
    editor = interactive-rebase-tool

[gitreview]
    # Gerrit username
    username = javier.tia

[credential]
    helper = "cache --timeout 21600"
    helper = oauth

[credential "https://gitlab.com"]
    helper =
    helper = !/usr/bin/glab auth git-credential

[maintenance "repack"]
    enabled = true
[maintenance "gc"]
    enabled = true
[maintenance "commit-graph"]
    enabled = true
[maintenance "prefetch"]
    enabled = true

[sendemail]
    smtpencryption = tls
    suppresscc = self
    smtpserverport = 587
    ; smtpServer = /usr/bin/msmtp
    ; smtpServerOption = -v

# vim:ft=gitconfig ts=4 sw=4
